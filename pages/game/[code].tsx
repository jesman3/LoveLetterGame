import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { getSocket } from '../../lib/socket';
const GUESSABLE=['Priest','Baron','Handmaid','Prince','King','Countess','Princess'];
export default function GamePage(){ const router=useRouter(); const { code } = router.query as { code?: string }; const [game,setGame]=useState<any>(null); const [players,setPlayers]=useState<any[]>([]); const [chat,setChat]=useState<any[]>([]); const [log,setLog]=useState<string[]>([]); const [pendingPlay,setPendingPlay]=useState<any>(null);
useEffect(()=>{ const s=getSocket(); if(!s) return; s.on('update',(g:any)=>{ setGame(g); setPlayers(g.players||[]); setLog(g.log||[]); }); s.on('players',(p:any[])=>setPlayers(p)); s.on('chat',(entry:any)=>setChat(c=>[...c,entry])); s.on('start',(g:any)=>{ setGame(g); setPlayers(g.players||[]); setLog(g.log||[]); }); s.on('privateReveal',({card})=>alert(`Priest reveal: ${card.name}`)); s.on('errorMsg',(e:any)=>alert(e.message));
if(code && typeof window!=='undefined'){ const k=`ll_name_${code}`; if(!localStorage.getItem(k)){ const n=window.prompt('Enter your display name to join the game:')||'Player'; localStorage.setItem(k,n);} const nm=localStorage.getItem(k)||'Player'; s.emit('joinGame',{code,playerName:nm},()=>{}); }
return ()=>{ s.off('update'); s.off('players'); s.off('chat'); s.off('start'); s.off('privateReveal'); s.off('errorMsg'); }; },[code]);
if(!code) return <div className='panel' style={{margin:20}}>Loading…</div>;
const s=getSocket(); const me=players.find((p:any)=>p.id===s?.id);
function startGame(){ s.emit('startGame', code); }
function sendChat(t:string){ s.emit('sendChat',{ code, message:t }); }
function playCardDirect(i:number){ const card=me?.hand?.[i]; if(!card) return; const needsTarget=['Guard','Priest','Baron','Prince','King'].includes(card.name); if(!needsTarget){ s.emit('playCard',{ code, cardIndex:i }); return;} setPendingPlay({ cardIndex:i }); }
function confirmTarget(targetId:string){ const card=me?.hand?.[pendingPlay.cardIndex]; if(!card) return; if(card.name==='Guard'){ const g=window.prompt(`Guess card (not Guard): ${GUESSABLE.join(', ')}`); if(!g||!GUESSABLE.includes(g.trim())) return alert('Invalid guess'); s.emit('playCard',{ code, cardIndex:pendingPlay.cardIndex, targetId, guessedCard:g.trim() }); } else { s.emit('playCard',{ code, cardIndex:pendingPlay.cardIndex, targetId }); } setPendingPlay(null); }
return (<div className='panel' style={{margin:16}}><h2>Game: {code}</h2><div className='stack' style={{alignItems:'flex-start'}}><div style={{flex:1,minWidth:280}} className='panel'><h3>Players</h3><ul className='list'>{players.map((p:any,idx:number)=>(<li key={p.id} style={{borderRadius:8, background: p.id===s?.id ? '#0b2' : 'transparent'}}><strong>{p.name}</strong> — Tokens: {p.tokens||0} {p.protected?'(protected)':''} {p.eliminated?'(eliminated)':''}{game&&game.currentPlayerIndex===idx?' ← current':''}</li>))}</ul><h3>Log</h3><div className='log'>{(log||[]).slice().reverse().map((l,i)=><div key={i}>{l}</div>)}</div><div style={{marginTop:10}}><button onClick={startGame}>Start Game</button></div></div><div style={{flex:2}} className='panel'><h3>Your Hand</h3><div className='stack'>{me?.hand?.map((c:any,i:number)=>(<div key={i} className='card'><img src={`/cards/${c.name.toLowerCase()}.png`} alt={c.name}/><div className='small' style={{marginTop:6}}>{c.name} — value {c.value}</div><button style={{marginTop:6}} onClick={()=>playCardDirect(i)}>Play</button></div>))||<div className='small'>Waiting for your player…</div>}</div>{pendingPlay && (<div className='panel' style={{marginTop:12}}><h4>Select a target</h4><div className='stack'>{players.filter((p:any)=>p.id!==s?.id && !p.eliminated).map((p:any)=>(<button key={p.id} onClick={()=>confirmTarget(p.id)}>{p.name}</button>))}<button onClick={()=>confirmTarget(s?.id)}>Target Yourself</button></div></div>)}</div><div style={{flex:1}} className='panel'><h3>Chat</h3><ChatPanel chat={chat} onSend={sendChat}/></div></div></div>); }
function ChatPanel({ chat, onSend }:{chat:any[], onSend:(t:string)=>void}){ const [val,setVal]=useState(''); return (<div><div className='log' style={{height:260}}>{(chat||[]).map((c,i)=>(<div key={i}><strong>{c.sender}:</strong> {c.message}</div>))}</div><div className='stack' style={{marginTop:8}}><input value={val} onChange={e=>setVal(e.target.value)} placeholder='Say something…' /><button onClick={()=>{ if(val.trim()){ onSend(val); setVal(''); } }}>Send</button></div></div>); }
